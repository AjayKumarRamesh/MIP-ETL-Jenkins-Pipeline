pipeline {
    agent { label 'kube_pod_slave' }
    environment {
        BUILD_RESULTS = [:]
        NAMES = [:]
    }
    
    stages {
        /*stage('GitHub Checkout') {
            git credentialsId: 'sangita_id_rsa' ,
            url: 'ssh://git@github.ibm.com/CIO-MAP/Jenkins_Poc_mapetl.git', branch: 'master'  
        }*/
        stage('Kickoff Jobs') {
            steps {
                script{
                    def builds = [:]
                    //def build_results = [:]
                    echo "${build_results.getClass()}"
                    NAMES = "${JOB_NAMES}".split('\n')
                    //echo "${names.getClass()}"

                    for (x in NAMES) {
                        def name = x

                        builds[name] = buildClosure(name, build_results)
                        //def temp_build = builds[name]
                        //echo "${temp_build.getClass()}"
                    }
                    parallel builds

                    //sendEmail(NAMES, BUILD_RESULTS)
                }
            }
        }
        stage('Email Build Results') {
            steps {
                script {
                    sendEmail(NAMES, BUILD_RESULTS)
                }
            }
        }
    }
}

def sendEmail(String[] names, LinkedHashMap build_results) {
    def body_text = ''
    for (name in names) {
        def key = name
        body_text += key + " - Build " + build_results[key].getDisplayName() + " - " + build_results[key].getResult()

        if (build_results[key].getResult() == 'FAILURE') {
            body_text += ": Check console output at " + build_results[key].getAbsoluteUrl() + " to view the results.\n"
        } else {
            body_text += "\n"
        }
    }
    emailext to: "caseyboerst@ibm.com",
    subject: "${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}!",
    body: body_text

}

def buildClosure(String name, LinkedHashMap build_results) {
                        return {
                            def runWrapper = build(job: name, propagate: true, wait: true)
                            build_results[name] = runWrapper
                        }
                    }