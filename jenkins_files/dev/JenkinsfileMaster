pipeline {
    agent { label 'kube_pod_slave' }
    stages {
        /*stage('GitHub Checkout') {
            git credentialsId: 'sangita_id_rsa' ,
            url: 'ssh://git@github.ibm.com/CIO-MAP/Jenkins_Poc_mapetl.git', branch: 'master'  
        }*/
        stage('Kickoff Jobs') {
            steps {
                script{
                    def builds = [:]
                    def build_results = [:]
                    def names = "${JOB_NAMES}".split('\n')

                    for (x in names) {
                        def name = x

                        builds[name] = buildClosure(name)
                        //def temp_build = builds[name]
                        //echo "${temp_build.getClass()}"

                    }
                    parallel builds

                    for (n in names) {
                        echo "${build_results[n].getClass()}"
                    }
                    /*
                    def body_text = ''
                    for (name in names) {
                    def key = name
                    body_text += key + " - Build # " + builds[key].number + " - " + builds[key].status

                    if (builds[key].getResult == 'FAILURE') {
                        body_text += ": Check console output at " + builds[key].getAbsoluteUrl() + " to view the results.\n"
                    } else {
                        body_text += "\n"
                    }
                }
                emailext to: "caseyboerst@ibm.com",
                subject: "${env.JOB_BASE_NAME} - Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}!",
                body: body_text */

                }
            }
        }
    }
}

def buildClosure(String name) {
                        return {
                            def runWrapper = build(job: name, propagate: true, wait: true)
                            build_results[name] = runWrapper
                        }
                    }